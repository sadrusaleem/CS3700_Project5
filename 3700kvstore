#!/usr/bin/env python

import sys, socket, select, json, random
from time import time
from logger import Logger

'''
I tried my best to document, but this is all from the Raft paper
'''

HEARTBEAT_INTERVAL = .3  #  in seconds
APPEND_ENTRIES_INTERVAL = .0005 #  in seconds
MAX_ENTRIES = 10 #  max number of log entries to send per append_entries


RAND_ELECTION_TIMEOUT_MIN = .4 # in seconds
RAND_ELECTION_TIMEOUT_MAX = .6 # 150-300 ms is what the paper

class Server():
	def __init__(self, my_id, replica_ids):
		log.success("server_start", id=my_id)

		self.id = my_id
		self.replica_ids = replica_ids
		self.leader = 'FFFF'  # unknown leader
		self.current_term = 0
		self.last_heard_rpc = time()  # the last time we heard from a leader/candidate in seconds
		self.election_timeout = random.uniform(RAND_ELECTION_TIMEOUT_MIN, RAND_ELECTION_TIMEOUT_MAX)
		self.is_candidate = False
		self.voted_for = None  # candidateId that received vote in current term (or null if none)
		self.voted_for_index = 0
		self.votes_earned = 0  # votes earned during this term
		self.last_heartbeat = 0  # last time we sent out a heartbeat in seconds
		self.last_append_entries = 0 # last time we sent out an append_entries in seconds

		self.data_store = {} #  key:value entries, ie. the 'state machine'
		self.log = [] #  a log entry looks like {'term': ..,
												# 'key': .., 'value': .., 'MID':..., 'src': ...)
		self.log.append('bs value') # (first index for log is 1)
		self.commit_index = 0  #  index of highest log entry known to be committted
		self.last_applied = 0  #  index of highest log entry applied to data_store
		self.next_index = {}  #  for each server, index of the next log entry to send to that server
		self.match_index = {}  #  for each server, index of highest log entry known to be replicated on server

		#for debugging
		self.heartbeat_count = 0
		self.append_entries_count = 0

		# Connect to the network. All messages to/from other replicas and clients will
		# occur over this socket
		self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
		self.sock.connect(self.id)

	def is_leader(self):
		return self.leader == self.id

	def is_leader_unknown(self):
		return self.leader == 'FFFF'

	def election_timeout_reached(self):
		return (time() - self.last_heard_rpc) > self.election_timeout and not self.is_leader()

	def has_majority_votes(self):
		majority = ((len(replica_ids) + 1) // 2) + 1  # number of servers needed for quorom

		return self.votes_earned >= majority

	def start(self):
		while True:
			try:
				#print '{} thinks the leader is {}'.format(self.id, self.leader)
				if self.election_timeout_reached():
					self.begin_election()
				elif self.is_candidate:
					self.check_candidate_status()
				elif self.is_leader():
					self.update_commit_index()
					self.check_to_send_append_entries()
					self.broadcast_hearbeat()

				self.apply_indexes()

				ready = select.select([self.sock], [], [], 0.1)[0]

				if self.sock in ready:
					msg_raw = self.sock.recv(32768)

					if len(msg_raw) == 0: continue
					msg = json.loads(msg_raw)

					other_term = msg.get('term')

					if other_term is not None:
						#  this is an RPC from another server
						if other_term > self.current_term:
							log.success('term_update', id=self.id, old_term=self.current_term, new_term=other_term)
							self.current_term = other_term
							# new term, gotta figure out who the leader is
							self.leader = 'FFFF'
							self.reset_candidacy()

					# this are all the diff. types of messages
					if msg['type'] == 'get':
						self.handle_get(msg)
					elif msg['type'] == 'put':
						self.handle_put(msg)
					elif msg['type'] == 'request_vote':
						self.handle_vote_request(msg)
					elif msg['type'] == 'request_vote_result':
						self.handle_vote_result(msg)
					elif msg['type'] == 'append_entries':
						self.handle_append_entries(msg)
					elif msg['type'] == 'append_entries_result' and self.is_leader():
						self.handle_append_entries_result(msg)
					else:
						log.warning('received unexpected type: ' + msg['type'])
			except Exception, e:
				log.error('UNKNOWN ERROR: {}'.format(str(e)))

	def handle_get(self, msg):
		log.success('received_get', id=self.id, client_id=msg['src'], key=msg['key'])

		if not self.is_leader() and not self.is_leader_unknown():
			# we aren't the leader but we know who is
			self.redirect_msg(dst=msg['src'], mid=msg['MID'])
		elif self.is_leader():
			log.success('leader_get', id=self.id, key=msg['key'])
			value = self.data_store.get(msg['key'])

			self.send_ok_get_msg(dst=msg['src'], mid=msg['MID'], value=value if value else "")
		elif self.is_leader_unknown() and self.data_store.get(msg['key']):
			# if ex-leader gets a GET request
			self.send_ok_get_msg(dst=msg['src'], mid=msg['MID'], value=self.data_store.get(msg['key']))
		else:
			self.send_fail_msg(dst=msg['src'], mid=msg['MID'])

	def handle_put(self, msg):
		log.success('received_put', id=self.id, client_id=msg['src'], key=msg['key'], value=msg['value'])

		if not self.is_leader() and not self.is_leader_unknown():
			# we aren't the leader but we know who is
			self.redirect_msg(dst=msg['src'], mid=msg['MID'])
		elif self.is_leader():
			log.success('leader_put', id=self.id, key=msg['key'], value=msg['value'])

			#  append to log
			log_entry = {'term': self.current_term,
						 'key': msg['key'],
						 'value': msg['value'],
						 'MID': msg['MID'],
						 'src': msg['src']}
			self.log.append(log_entry)
		# else:
		# 	self.send_fail_msg(dst=msg['src'], mid=msg['MID'])

	def handle_vote_request(self, msg):
		if msg['term'] < self.current_term:
			#print '1deny: ' + str(msg)
			self.deny_vote(dst=msg['src'])
		elif (self.voted_for == None or self.voted_for == msg['src'])\
				and msg['last_log_index'] >= len(self.log) - 1:
			# TODO maybe add last_log_term check
			self.last_heard_rpc = time()
			self.voted_for = msg['src']
			self.voted_for_index = msg['last_log_index']
			self.grant_vote(dst=msg['src'])
		elif (msg['last_log_index'] >= (len(self.log) - 1))\
				and msg['last_log_index'] > self.voted_for_index:
			self.last_heard_rpc = time()
			self.voted_for = msg['src']
			self.voted_for_index = msg['last_log_index']
			self.grant_vote(dst=msg['src'])
		else:
			#print '{}: 2deny: votedFor = {}, our_index = {}'.format(self.id, self.voted_for, len(self.log) - 1) + str(msg)
			self.deny_vote(dst=msg['src'])

	def handle_vote_result(self, msg):
		self.last_heard_rpc = time()
		if self.is_candidate and msg['vote_granted']:
			log.success('received_vote', id=self.id, term=self.current_term, src=msg['src'])
			self.votes_earned += 1

	def handle_append_entries(self, msg):
		#if self.is_candidate and msg['term'] >= self.current_term:
		if self.is_leader_unknown() and msg['term'] >= self.current_term:
			#  have found a new leader
			self.last_heard_rpc = time()
			log.success("found_new_leader", id=self.id, new_leader=msg['src'], new_term=msg['term'])
			self.leader = msg['src']
			self.current_term = msg['term']
			self.reset_candidacy()
		elif not self.is_candidate and len(msg['entries']) > 0:
			if msg['term'] < self.current_term:
				#print '{}: replied False because of the term. Ours: {}, Theirs: {}'.format(self.id, self.current_term, msg['term'])
				self.send_false_append_result(dst=msg['src'])
				return

			# 'Reply false if log doesn't contain an entry at prevLogIndex whose term matches prevLogTerm'
			prev_log_term = msg['prev_log_term']
			prev_log_index = msg['prev_log_index']
			if prev_log_term > 0 and prev_log_index != 0 and (len(self.log) - 1) >= prev_log_index:
				last_log_entry_term = self.log[prev_log_index]['term']
				if last_log_entry_term != prev_log_term:
					#print '{}: replied False because of the prevlogstuff'.format(self.id)
					self.send_false_append_result(dst=msg['src'])
					return

			self.last_heard_rpc = time()
			# safe to append entries now
			self.log = self.log[:prev_log_index+1] #  delete any existing entries if there are any
			for entry in msg['entries']:
				self.log.append(entry)

			if msg['leader_commit'] > self.commit_index:
				last_log_index = len(self.log) - 1
				self.commit_index = min(msg['leader_commit'], last_log_index)

			self.send_true_append_result(dst=msg['src'], newest_index=len(self.log) - 1)
		elif len(msg['entries']) == 0 and msg['term'] >= self.current_term:
			# heartbeat
			self.last_heard_rpc = time()

	def handle_append_entries_result(self, msg):
		if msg['success']:
			newest_index_added = msg['newest_index']
			self.next_index[msg['src']] = newest_index_added + 1
			self.match_index[msg['src']] = newest_index_added
		else:
			#  this follower is behind, decrement next_index for him
			self.next_index[msg['src']] -= 1

	def send_fail_msg(self, dst, mid):
		# sends a message of type fail to the given dst with the given MID
		log.info("replied_with_fail", id=self.id, client_id=dst)
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'fail',
			   'MID': mid}

		self.send_msg(msg)

	def send_msg(self, msg):
		# takes in a dictionary, serializes it and sends it across the wire
		try:
			self.sock.send(json.dumps(msg))
		except Exception, e:
			log.info("Unable to send msg: " + msg)

	def begin_election(self):
		# starts election process, Section 5.2
		log.success("election_start", id=self.id, new_term=self.current_term + 1)
		self.leader = 'FFFF'
		self.current_term += 1
		self.is_candidate = True
		self.last_heard_rpc = time()  # restart election timeout countdown
		#  self.randomize_election_timeout()

		# vote for self
		self.voted_for = self.id
		self.votes_earned = 1

		self.send_request_votes()

	def send_request_votes(self):
		log.success("send_request_votes", id=self.id, term=self.current_term, last_log_index=len(self.log) - 1)
		msg = {'src': self.id,
			   'dst': 'FFFF',  # broadcast
			   'leader': self.leader,
			   'type': 'request_vote',
			   'term': self.current_term,
			   'last_log_index': len(self.log) - 1,
			   'last_log_term': self.log[len(self.log) - 1]['term'] if len(self.log) > 1 else 0}

		self.send_msg(msg)

	def check_candidate_status(self):
		if self.has_majority_votes():
			#  become kim jong un
			log.success("became_leader", id=self.id, term=self.current_term, num_votes = self.votes_earned)
			self.leader = self.id
			self.reset_candidacy()
			self.broadcast_hearbeat(force=True)

			#  reintialize next_index and match_index after election as specified by paper
			for r_id in replica_ids:
				self.next_index[r_id] = len(self.log)
				self.match_index[r_id] = 0

	def broadcast_hearbeat(self, force=False):
		# self.heartbeat_count += 1
		# if self.heartbeat_count % 500 == 0:
		# 	print 'heartbeats: {}'.format(self.heartbeat_count)

		curr_time = time()
		if force or ((curr_time - self.last_heartbeat) > HEARTBEAT_INTERVAL):
			self.last_heartbeat = time()
			msg = {'src': self.id,
				   'dst': 'FFFF',  # broadcast
				   'leader': self.leader,
				   'type': 'append_entries',
				   'term': self.current_term,
				   'entries': []}  # empty for heartbeat

			# TODO: implement prevLogIndex, prevLogTerm, leaderCommit
			self.send_msg(msg)

	def deny_vote(self, dst):
		log.success("deny_vote", id=self.id, to=dst, term=self.current_term)
		self.reply_to_vote(dst=dst, vote_granted=False)

	def grant_vote(self, dst):
		log.success("grant_vote", id=self.id, to=dst, term=self.current_term)
		self.reply_to_vote(dst=dst, vote_granted=True)

	def reply_to_vote(self, dst, vote_granted):
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'request_vote_result',
			   'term': self.current_term,
			   'vote_granted': vote_granted}

		self.send_msg(msg)

	def reset_candidacy(self):
		#  when we are done being a candidate
		self.is_candidate = False
		self.voted_for = None
		self.votes_earned = 0
		self.voted_for_index = 0

	def redirect_msg(self, dst, mid):
		log.success("redirect", id=self.id, client_id=dst, leader=self.leader)
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'redirect',
			   'MID': mid}

		self.send_msg(msg)

	def send_ok_put_msg(self, dst, mid):
		#  response to client when the put was successful
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'ok',
			   'MID': mid}

		self.send_msg(msg)

	def send_ok_get_msg(self, dst, mid, value):
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'ok',
			   'MID': mid,
			   'value': value}

		self.send_msg(msg)

	def check_to_send_append_entries(self):
		curr_time = time()
		if (curr_time - self.last_append_entries) > APPEND_ENTRIES_INTERVAL:
			self.last_append_entries = curr_time

			last_log_index = len(self.log) - 1
			for replica_id, next_idx in self.next_index.iteritems():
				if last_log_index >= next_idx:
					self.send_append_entries(dst=replica_id, start_index=next_idx)
		#print '{} time has elapsed bbut we need it to be {}'.format(curr_time - self.last_append_entries, APPEND_ENTRIES_INTERVAL)

	def send_append_entries(self, dst, start_index):
		log.success("append_entries", id=self.id, dst=dst, start_index=start_index)
		# self.append_entries_count += 1
		# if self.append_entries_count % 500 == 0:
		# 	print 'append entries: {}'.format(self.append_entries_count)

		entries = self.log[start_index:]

		if len(entries) > MAX_ENTRIES:
			entries = entries[:MAX_ENTRIES]

		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'append_entries',
			   'term': self.current_term,
			   'prev_log_index': start_index - 1,
			   'prev_log_term': self.log[start_index - 1]['term'] if start_index != 1 else 0,
			   'entries': entries,
			   'leader_commit': self.commit_index}

		self.send_msg(msg)

	def send_true_append_result(self, dst, newest_index):
		self.send_append_result(dst=dst, success = True, newest_index=newest_index)

	def send_false_append_result(self, dst):
		self.send_append_result(dst=dst, success=False)

	def send_append_result(self, dst, success, newest_index=None):
		log.success('send_append_result', id=self.id, dst=dst, success=success)
		msg = {'src': self.id,
			   'dst': dst,
			   'leader': self.leader,
			   'type': 'append_entries_result',
			   'term': self.current_term,
			   'success': success}
		if newest_index:
			msg['newest_index'] = newest_index

		self.send_msg(msg)

	def update_commit_index(self):
		highest_match_index = self.get_highest_match_index()
		try:
			for i in range(self.commit_index+1, highest_match_index+1):
				count = 0
				if self.log[i]['term'] == self.current_term:
					for replica_id, match_idx in self.match_index.iteritems():
						if match_idx >= i:
							count += 1
					majority = (len(replica_ids) // 2) # number of servers needed for quorom
					if count >= majority:
						self.commit_index = i
		except Exception, e:
			log.error('{} failed update_commit_index. Error: {}'.format(self.id, str(e)))

	def get_highest_match_index(self):
		so_far = 0
		for replica_id, match_idx in self.match_index.iteritems():
			if match_idx > so_far:
				so_far = match_idx
		return so_far

	def randomize_election_timeout(self):
		self.election_timeout = random.uniform(RAND_ELECTION_TIMEOUT_MIN, RAND_ELECTION_TIMEOUT_MAX)

	def apply_indexes(self):
		while self.commit_index > self.last_applied:
			#  have some log entries we can apply to state machine
			try:
				log_entry = self.log[self.last_applied + 1]
				self.data_store[log_entry['key']] = log_entry['value']
				log.success("applied_log_entry", id=self.id, index=self.last_applied + 1,
							key=log_entry['key'], value=log_entry['value'])

				if self.is_leader() or self.is_leader_unknown() or True:
					self.send_ok_put_msg(dst=log_entry['src'], mid=log_entry['MID'])
			except:
				log.error("{} had an error while applying index {}".format(self.id, self.last_applied + 1))
				break
			finally:
				# can increment now since we know it was applied
				self.last_applied += 1


if __name__ == "__main__":
	# Your ID number
	my_id = sys.argv[1]

	# The ID numbers of all the other replicas
	replica_ids = sys.argv[2:]
	log = Logger({
		"server_start": "Server {id} starting up",
		"received_get": "Server {id} receieved a GET request for key {key} from client {client_id}",
		"received_put": "Server {id} receieved a PUT request for key/value {key}/{value} from client {client_id}",
		"replied_with_fail": "Server {id} replied to client {client_id} with a fail message",
		"election_start": "Server {id} has started an election for the next term: {new_term}",
		"received_vote": "Server {id} has received a vote for term {term} from {src}",
		"found_new_leader": "Server {id} has found the new leader: {new_leader} for term {new_term}",
		"became_leader": "Server {id} has just become the leader for term {term} with {num_votes} votes",
		"redirect": "Server {id} has redirected a request from client {client_id} to the leader {leader}",
		"leader_put": "Leader {id} has received a PUT for key/value {key}/{value}",
		"leader_get": "Leader {id} has responded to a GET request for key {key}",
		"term_update": "Server {id} has updated it's term from {old_term} to {new_term}",
		"applied_log_entry": "Server {id} has applied log index {index} with key/value {key}/{value}",
		"grant_vote": "Server {id} is granting a vote to {to} for term {term}",
		"append_entries": "Leader {id} is sending append entries to {dst} for start_index: {start_index}",
		"send_append_result": "Server {id} has replied to {dst}'s append_entries with a {success}",
		"deny_vote": "Server {id} has DENIED the vote to {to} for term {term}",
		"send_request_votes": "Server {id} is requesting votes for term {term} with last_log_index {last_log_index}"
	}, enabled=False)

	server = Server(my_id, replica_ids)

	# start up the bridge
	server.start()
